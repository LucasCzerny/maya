#version 450

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 0, binding = 0, rgba8) uniform image2D color_buffer;

// scene descriptor

layout(set = 1, binding = 0) readonly buffer Positions {
    vec3 positions[];
};

layout(set = 1, binding = 1) readonly buffer Normals {
    vec3 normals[];
};

layout(set = 1, binding = 2) readonly buffer Tangents {
    vec4 tangents[];
};

layout(set = 1, binding = 3) readonly buffer Tex_Coords {
    vec2 tex_coords[];
};

layout(set = 1, binding = 4) readonly buffer Indices {
    uvec3 indices[];
};

// layout(set = 2, binding = 0) uniform sampler2D materials[MAX_NR_PRIMITIVES];

layout(set = 2, binding = 0) uniform Camera {
    vec3 camera_position;
    vec3 camera_forward;
    vec3 camera_right;
    vec3 camera_up;
};

struct Ray {
    vec3 origin;  
    vec3 direction;
};

struct Intersection {
    vec2 coords;
    float distance;
};

struct Intersection_Result {
    Intersection intersection;
    uvec3 indices;
};

struct Hit_Payload {
    float distance;
    vec3 position; 
    vec3 normal;
    vec4 tangent;
    vec2 tex_coords;
    vec3 albedo;
};

float MAX_DISTANCE = 100000;

Intersection_Result intersect(Ray ray);
Hit_Payload trace_ray(Ray ray);

void main() {
    const ivec2 screen_pos = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 screen_size = imageSize(color_buffer);

	const float horizontal_coefficient = (float(screen_pos.x) / float(screen_size.x)) * 2.0 - 1.0;
	float vertical_coefficient = (float(screen_pos.y) / float(screen_size.y)) * 2.0 - 1.0;
	vertical_coefficient *= float(screen_size.y) / float(screen_size.x);

	Ray ray;
	ray.origin = camera_position;
	ray.direction = normalize(
    	camera_forward
    	+ horizontal_coefficient * camera_right
    	+ vertical_coefficient * camera_up
	);

   	vec3 output_color = vec3(0.0);

	for (int i = 0; i < 1; i++) {
	    Hit_Payload payload = trace_ray(ray);
	    output_color += payload.albedo;
	}

	imageStore(color_buffer, screen_pos, vec4(output_color, 1.0));
}

/*
    Intersection_Result intersect()
*/

Intersection triangle_intersect(Ray ray, uvec3 indices);

Intersection_Result intersect(Ray ray) {
    Intersection closest_intersection;
    closest_intersection.distance = MAX_DISTANCE;

    uvec3 closest_indices;

    for (uint i = 0; i < indices.length(); i++) {
        uvec3 indices = indices[i];

        Intersection intersection = triangle_intersect(ray, indices);
        
        if (intersection.distance < closest_intersection.distance) {
            closest_intersection = intersection;
            closest_indices = indices;
        }
    }

    Intersection_Result result;
    result.intersection = closest_intersection;
    result.indices = closest_indices;

    return result;
}

Intersection triangle_intersect(Ray ray, uvec3 indices) {
    Intersection intersection;
    
    /*
       v0  a ->   v1
        +---------+
         \       /
     b |  \     /
       v   \   /
             +
            v2
    */

    vec3 v0 = positions[indices[0]];
    vec3 v1 = positions[indices[1]];
    vec3 v2 = positions[indices[2]];

    if (indices[0] == 0) { v0 = vec3(-0.5, -0.5, 0.5); }
    if (indices[0] == 1) { v0 = vec3(0.5, -0.5, 0.5); }
    if (indices[0] == 2) { v0 = vec3(-0.5, 0.5, 0.5); }
    if (indices[0] == 3) { v0 = vec3(0.5, 0.5, 0.5); }
    if (indices[0] == 4) { v0 = vec3(0.5, 0.5, 0.5); }
    if (indices[0] == 5) { v0 = vec3(0.5, -0.5, 0.5); }
    if (indices[0] == 6) { v0 = vec3(0.5, 0.5, -0.5); }
    if (indices[0] == 7) { v0 = vec3(0.5, -0.5, -0.5); }
    if (indices[0] == 8) { v0 = vec3(-0.5, 0.5, 0.5); }
    if (indices[0] == 9) { v0 = vec3(0.5, 0.5, 0.5); }
    if (indices[0] == 10) { v0 = vec3(-0.5, 0.5, -0.5); }
    if (indices[0] == 11) { v0 = vec3(0.5, 0.5, -0.5); }
    if (indices[0] == 12) { v0 = vec3(0.5, -0.5, 0.5); }
    if (indices[0] == 13) { v0 = vec3(-0.5, -0.5, 0.5); }
    if (indices[0] == 14) { v0 = vec3(0.5, -0.5, -0.5); }
    if (indices[0] == 15) { v0 = vec3(-0.5, -0.5, -0.5); }
    if (indices[0] == 16) { v0 = vec3(-0.5, -0.5, 0.5); }
    if (indices[0] == 17) { v0 = vec3(-0.5, 0.5, 0.5); }
    if (indices[0] == 18) { v0 = vec3(-0.5, -0.5, -0.5); }
    if (indices[0] == 19) { v0 = vec3(-0.5, 0.5, -0.5); }
    if (indices[0] == 20) { v0 = vec3(-0.5, -0.5, -0.5); }
    if (indices[0] == 21) { v0 = vec3(-0.5, 0.5, -0.5); }
    if (indices[0] == 22) { v0 = vec3(0.5, -0.5, -0.5); }
    if (indices[0] == 23) { v0 = vec3(0.5, 0.5, -0.5); }
    
    if (indices[1] == 0) { v1 = vec3(-0.5, -0.5, 0.5); }
    if (indices[1] == 1) { v1 = vec3(0.5, -0.5, 0.5); }
    if (indices[1] == 2) { v1 = vec3(-0.5, 0.5, 0.5); }
    if (indices[1] == 3) { v1 = vec3(0.5, 0.5, 0.5); }
    if (indices[1] == 4) { v1 = vec3(0.5, 0.5, 0.5); }
    if (indices[1] == 5) { v1 = vec3(0.5, -0.5, 0.5); }
    if (indices[1] == 6) { v1 = vec3(0.5, 0.5, -0.5); }
    if (indices[1] == 7) { v1 = vec3(0.5, -0.5, -0.5); }
    if (indices[1] == 8) { v1 = vec3(-0.5, 0.5, 0.5); }
    if (indices[1] == 9) { v1 = vec3(0.5, 0.5, 0.5); }
    if (indices[1] == 10) { v1 = vec3(-0.5, 0.5, -0.5); }
    if (indices[1] == 11) { v1 = vec3(0.5, 0.5, -0.5); }
    if (indices[1] == 12) { v1 = vec3(0.5, -0.5, 0.5); }
    if (indices[1] == 13) { v1 = vec3(-0.5, -0.5, 0.5); }
    if (indices[1] == 14) { v1 = vec3(0.5, -0.5, -0.5); }
    if (indices[1] == 15) { v1 = vec3(-0.5, -0.5, -0.5); }
    if (indices[1] == 16) { v1 = vec3(-0.5, -0.5, 0.5); }
    if (indices[1] == 17) { v1 = vec3(-0.5, 0.5, 0.5); }
    if (indices[1] == 18) { v1 = vec3(-0.5, -0.5, -0.5); }
    if (indices[1] == 19) { v1 = vec3(-0.5, 0.5, -0.5); }
    if (indices[1] == 20) { v1 = vec3(-0.5, -0.5, -0.5); }
    if (indices[1] == 21) { v1 = vec3(-0.5, 0.5, -0.5); }
    if (indices[1] == 22) { v1 = vec3(0.5, -0.5, -0.5); }
    if (indices[1] == 23) { v1 = vec3(0.5, 0.5, -0.5); }

    if (indices[2] == 0) { v2 = vec3(-0.5, -0.5, 0.5); }
    if (indices[2] == 1) { v2 = vec3(0.5, -0.5, 0.5); }
    if (indices[2] == 2) { v2 = vec3(-0.5, 0.5, 0.5); }
    if (indices[2] == 3) { v2 = vec3(0.5, 0.5, 0.5); }
    if (indices[2] == 4) { v2 = vec3(0.5, 0.5, 0.5); }
    if (indices[2] == 5) { v2 = vec3(0.5, -0.5, 0.5); }
    if (indices[2] == 6) { v2 = vec3(0.5, 0.5, -0.5); }
    if (indices[2] == 7) { v2 = vec3(0.5, -0.5, -0.5); }
    if (indices[2] == 8) { v2 = vec3(-0.5, 0.5, 0.5); }
    if (indices[2] == 9) { v2 = vec3(0.5, 0.5, 0.5); }
    if (indices[2] == 10) { v2 = vec3(-0.5, 0.5, -0.5); }
    if (indices[2] == 11) { v2 = vec3(0.5, 0.5, -0.5); }
    if (indices[2] == 12) { v2 = vec3(0.5, -0.5, 0.5); }
    if (indices[2] == 13) { v2 = vec3(-0.5, -0.5, 0.5); }
    if (indices[2] == 14) { v2 = vec3(0.5, -0.5, -0.5); }
    if (indices[2] == 15) { v2 = vec3(-0.5, -0.5, -0.5); }
    if (indices[2] == 16) { v2 = vec3(-0.5, -0.5, 0.5); }
    if (indices[2] == 17) { v2 = vec3(-0.5, 0.5, 0.5); }
    if (indices[2] == 18) { v2 = vec3(-0.5, -0.5, -0.5); }
    if (indices[2] == 19) { v2 = vec3(-0.5, 0.5, -0.5); }
    if (indices[2] == 20) { v2 = vec3(-0.5, -0.5, -0.5); }
    if (indices[2] == 21) { v2 = vec3(-0.5, 0.5, -0.5); }
    if (indices[2] == 22) { v2 = vec3(0.5, -0.5, -0.5); }
    if (indices[2] == 23) { v2 = vec3(0.5, 0.5, -0.5); }

    vec3 a = v1 - v0;
    vec3 b = v2 - v0;

    vec3 normal = cross(b, a);
    float determinant = dot(ray.direction, normal);

    // ray is parallel to the triangle plane,
    // they will never intersect
    if (abs(determinant) < 1e-6) {
        intersection.distance = MAX_DISTANCE;
        return intersection;
    }

    /*
        Describing a point on the triangle using barycentric coordinates:
        P = v0 + u * a + v * b

        find the intersection:
        ray.origin + ray.direction * t = v0 + u * a + v * b

        solve using cramer's rule
    */

    vec3 p = v0 - ray.origin;
    vec3 q = cross(p, ray.direction);

    float u = dot(q, b) / determinant;
    float v = dot(q, a) / determinant;

    // the ray intersects the triangle plane,
    // but doesn't hit the triangle itself
    if (u < 0.0 || v < 0.0 || (u + v) > 1.0) {
        intersection.distance = MAX_DISTANCE;
        return intersection;
    }
    
    intersection.coords = vec2(u, v);
    intersection.distance = dot(normal, p) / determinant;

    return intersection;
}

/*
    Hit_Payload trace_ray(Ray ray)
*/

Hit_Payload Miss();
Hit_Payload ClosestHit(Intersection intersection, uvec3 indices);

vec3 mix_position(uvec3 indices, vec2 coords);
vec3 mix_normal(uvec3 indices, vec2 coords);
vec4 mix_tangent(uvec3 indices, vec2 coords);
vec2 mix_tex_coords(uvec3 indices, vec2 coords);

Hit_Payload trace_ray(Ray ray) {
    Intersection_Result result = intersect(ray);
    Intersection intersection = result.intersection;

    if (intersection.distance == MAX_DISTANCE) {
        return Miss();
    }

    uvec3 indices = result.indices;
    
    return ClosestHit(intersection, indices);
}

Hit_Payload Miss() {
    Hit_Payload payload;
    payload.distance = MAX_DISTANCE;
    payload.albedo = vec3(0.05, 0.2, 0.8);

    return payload;
}

Hit_Payload ClosestHit(Intersection intersection, uvec3 indices) {
    Hit_Payload payload;

    payload.distance = intersection.distance;

    payload.position = mix_position(indices, intersection.coords);
    payload.normal = mix_normal(indices, intersection.coords);
    payload.tangent = mix_tangent(indices, intersection.coords);
    payload.tex_coords = mix_tex_coords(indices, intersection.coords);

    // payload.normal = normal_mapping();

    payload.albedo = vec3(1.0, 0.0, 0.0);

    return payload;
}

vec3 mix_position(uvec3 indices, vec2 coords) {
    vec3 v0 = positions[indices[0]];
    vec3 v1 = positions[indices[1]];
    vec3 v2 = positions[indices[2]];

    return mix(v0, v1, coords[0]) + mix(v0, v2, coords[1]);
}

vec3 mix_normal(uvec3 indices, vec2 coords) {
    vec3 v0 = normals[indices[0]];
    vec3 v1 = normals[indices[1]];
    vec3 v2 = normals[indices[2]];

    return mix(v0, v1, coords[0]) + mix(v0, v2, coords[1]);
}

vec4 mix_tangent(uvec3 indices, vec2 coords) {
    vec4 v0 = tangents[indices[0]];
    vec4 v1 = tangents[indices[1]];
    vec4 v2 = tangents[indices[2]];

    return mix(v0, v1, coords[0]) + mix(v0, v2, coords[1]);
}

vec2 mix_tex_coords(uvec3 indices, vec2 coords) {
    vec2 v0 = tex_coords[indices[0]];
    vec2 v1 = tex_coords[indices[1]];
    vec2 v2 = tex_coords[indices[2]];

    return mix(v0, v1, coords[0]) + mix(v0, v2, coords[1]);
}

